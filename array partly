class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int[] arr = new int[nums.length];
        int start =0;
        int end = nums.length-1;
        for(int i =0;i<=nums.length-1;i++){
            if(nums[i]%2==0) arr[start++]=nums[i];
            else arr[end--] = nums[i];
        }
        return arr;
    }
}

// optimal 

class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int left = 0;
        int right = nums.length - 1;

        while (left < right) {
            // Move left pointer if the number is even
            if (nums[left] % 2 == 0) {
                left++;
            }
            // Move right pointer if the number is odd
            else if (nums[right] % 2 == 1) {
                right--;
            }
            // Swap if left is odd and right is even
            else {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                left++;
                right--;
            }
        }

        return nums;
    }
}
