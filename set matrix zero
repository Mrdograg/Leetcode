// brute 

class Solution {
    private void markRows(int[][]matrix,int m, int n, int i){
        for(int j =0;j<m;j++){
            if( matrix[i][j]!=0)
            matrix[i][j]=-1;
        }
    }
    private void markCols(int[][]matrix,int m, int n, int j){
        for(int i =0;i<n;i++){
            if( matrix[i][j]!=0)
             matrix[i][j]=-1;
        }
    }
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
               if(matrix[i][j]==0){
                markRows(matrix,m,n,i);
                markCols(matrix,m,n,j);
               }
            }
        }
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
               if(matrix[i][j]==-1){
                matrix[i][j]=0;
               }
            }
        }
    }
}

// better but with space complexity 

class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int [] a = new int[n];
        int [] b = new int[m];

        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
               if(matrix[i][j]==0){
                 a[i] = 1;
                 b[j] = 1;
               }
            }
        }
        for(int i =0;i<n;i++){
            for(int j =0;j<m;j++){
               if(a[i]==1||b[j]==1){
                matrix[i][j]=0;
               }
            }
        }
    }
}

// optimal without space complexity 

