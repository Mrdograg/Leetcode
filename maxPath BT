/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int maxPath(TreeNode root, int[] max) {
        if (root == null) {
            return 0;
        }

        int left = Math.max(0, maxPath(root.left, max));   // Don't include negative paths
        int right = Math.max(0, maxPath(root.right, max)); // Same here

        max[0] = Math.max(max[0], left + right + root.val); // Update max path

        return Math.max(left, right) + root.val; // Return max one-sided path
    }

    public int maxPathSum(TreeNode root) {
        int[] max = new int[]{Integer.MIN_VALUE};
        maxPath(root, max);
        return max[0];
    }
}
