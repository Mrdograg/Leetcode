class LRUCache {
    class Node {
        Node next, prev;
        int key, value;

        Node(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }

    int capacity;
    Map<Integer,Node> mpp = new HashMap<>();
    Node head = new Node(0, 0);
    Node tail = new Node(0, 0);

    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }

    public int get(int key) {
        if (mpp.containsKey(key)) {
            Node node = mpp.get(key);
            remove(node);
            insert(node);
            return node.value;
        }

        return -1;

    }

    public void put(int key, int value) {
        if (mpp.containsKey(key)) {
            remove(mpp.get(key)); // Remove old node if key exists        
        }
        if (mpp.size() == capacity) {
            // Remove least recently used node
            remove(tail.prev);
        }
        Node newNode = new Node(key, value);
        insert(newNode);

    }

    private void remove(Node node) {
        mpp.remove(node.key);
         node.prev.next = node.next;
        node.next.prev = node.prev;
       

    }

    private void insert(Node node) {
        mpp.put(node.key, node);
        node.next = head.next;
        node.prev = head;
        head.next.prev = node;
        head.next = node;

    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
