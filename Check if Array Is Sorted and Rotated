brute force 

import java.util.Arrays;

class Solution {
    public boolean check(int[] nums) {
        int n = nums.length;
        
        // Get the sorted version of the array
        int[] sortedArr = nums.clone();
        Arrays.sort(sortedArr);

        // Try rotating the array and compare with sortedArr
        for (int i = 0; i < n; i++) {
            if (Arrays.equals(nums, sortedArr)) {
                return true;  // If the array is sorted after some rotation, return true
            }
            // Rotate the array by one step to the left
            rotate(nums);
        }
        
        return false;  // If we complete all rotations and don't find a match
    }

    // Method to rotate the array by one position to the left
    private void rotate(int[] arr) {
        int temp = arr[0];
        for (int i = 1; i < arr.length; i++) {
            arr[i - 1] = arr[i];
        }
        arr[arr.length - 1] = temp;
    }
}

TC - n2
SC - n




optimal 

class Solution {
    public boolean check(int[] nums) {
        int count = 0;

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[(i + 1) % nums.length]) {
                count++;
            }
        }

        return count <= 1;
    }
}

tc - n 
oc - 1
